{"ast":null,"code":"import _defineProperty from \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/james/Desktop/REACT_APPS/react-prac-two/client/src/components/ProjectForm/ProjectForm.js\";\nimport React from 'react'; //import { Form, Button, Container } from 'react-bootstrap'\n\nimport API from '../../utils/API';\n/*\nclass ProjectForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: {\n                projectTitle: '',\n                creator: '',\n                startDate: '',\n                deadLine: ''\n            }\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({ value: e.target.value });\n    }\n\n    handleSubmit(e) {\n        alert(\"Form has been successfully submitted! :: \"+this.state.value.projectTitle);\n        e.preventDefault();\n    }\n\n\n    render() {\n        return(\n            <React.Fragment>\n\n                    <form method=\"post\" onSubmit={this.handleSubmit} >\n                        <input type=\"text\" value={this.state.value.projectTitle} onChange={this.handleChange} placeholder=\"Project Title\" /> <br/>\n                        <input type=\"text\" value={this.state.value.creator} onChange={this.handleChange} placeholder=\"Username\" /> <br/>\n                        <input type=\"text\" value={this.state.value.startDate} onChange={this.handleChange} placeholder=\"Start Date\" /> <br/>\n                        <input type=\"text\" value={this.state.value.deadLine} onChange={this.handleChange} placeholder=\"Due Date\" /> <br/>\n                        <br/>\n                        <input type=\"submit\" vlaue=\"submit\" />\n                    </form>\n\n\n            </React.Fragment>\n        )\n    }\n\n\n}\nexport default ProjectForm\n\n\n\n\nclass ProjectForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            fields: {},\n            errors: {}\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n\n    };\n\n    handleChange = (e) => {\n        let fields = this.state.fields;\n        fields[e.target.name] = e.target.value;\n        this.setState({\n            fields\n        });\n    }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        if (this.projectForm()) {\n            let fields = {};\n            fields[\"projectTitle\"] = \"\";\n            fields[\"creator\"] = \"\";\n            fields[\"startDate\"] = \"\";\n            fields[\"deadLine\"] = \"\";\n            this.setState({ fields: fields });\n            alert(\"PROJECT SUBMITTED!\")\n        };\n    }\n\n    projectForm = () => {\n        let fields = this.state.fields;\n        let errors = {};\n        let isFormValid = true;\n\n        if (!fields['creator']) {\n            isFormValid = false;\n            errors[\"creator\"] = \"* Please Enter username!\";\n        }\n        if (typeof fields[\"creator\"] !== \"undefined\") {\n            if (!fields[\"creator\"].match(/^[a-zA-z ]*$/)) {\n                isFormValid = false;\n                errors[\"creator\"] = \"*  please add aplhabetical characters!\";\n            }\n        }\n\n\n        if (!fields[\"projectTitle\"]) {\n            isFormValid = false;\n            errors[\"projectTitle\"] = \"* Please define the title of the project!\";\n        }\n        if (typeof fields[\"projectTitle\"] !== \"undefined\") {\n            if (!fields[\"projectTitle\"].match(/^[a-zA-z ]*$/)) {\n                isFormValid = false;\n                errors[\"projectTitle\"] = \"* please user alphabetical characters only!\";\n            }\n        }\n\n        this.setState({\n            errors: errors\n        });\n        return isFormValid;\n\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <div id=\"register\">\n\n                <h3>Enter Details Below</h3>\n                <form method=\"post\" name=\"userProjectForm\" onSubmit={this.submitForm}>\n                    <label>Username:</label>\n                    <input type=\"text\" name=\"creator\" value={this.state.fields.creator} onChange={this.handleChange} />\n                        <div className=\"errorMsg\">{this.state.errors.creator}</div>\n\n                    <label>Project Title</label>\n                    <input type=\"text\" name=\"projectTitle\" value={this.state.fields.projectTitle} />\n                        <div className=\"errorMsg\">{this.state.errors.projectTitle}</div>\n\n                    <label>Start Date</label>\n                    <input type=\"text\" name=\"startDate\" value={this.state.fields.startDate} onChange={this.handleChange} />\n                    <br/>\n                    <label>Dead Line</label>\n                    <input type=\"text\" name=\"deadLine\" value={this.state.fields.deadLine} onChange={this.handleChange} />     \n                    <br/>\n                    <input  style={{ marginLeft: '15.8%' }} type=\"submit\" className=\"button\" value=\"Register\"/>\n\n\n                </form>\n\n\n                </div>\n\n\n\n            </React.Fragment>\n        )\n    }\n\n\n\n}\nexport default ProjectForm\n*/\n// /\\ ATT::2 /\\\n// \\/ ATT::1 \\/\n\nvar ProjectForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProjectForm, _React$Component);\n\n  function ProjectForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProjectForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProjectForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      projectTitle: '',\n      creator: '',\n      startDate: '',\n      deadLine: '',\n      workTime: '',\n      commitment: ''\n    };\n\n    _this.handleInputChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleFormSubmit = function (e) {\n      e.preventDefault();\n\n      if (_this.state.creator && _this.state.title && _this.state.startDate && _this.state.deadLine) {\n        API.saveProject({\n          title: _this.state.projectTitle,\n          creator: _this.state.creator,\n          startDate: _this.state.startDate,\n          deadLine: _this.state.deadLine\n        }).then(function (res) {\n          return console.log(res);\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n\n      ;\n    };\n\n    return _this;\n  }\n\n  _createClass(ProjectForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"formUserName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Project Administrator\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"Enter username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formProjectTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Project Name\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"What are you working on?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formStartDate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Start Date\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"When was this assigned?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formDeadLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Deadline\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"When is this to be completed by?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formWorkData\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Hours worked per week?\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"work hours\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"User Commitment\"), React.createElement(Form.Control, {\n        type: \"text\",\n        placeholder: \"How many hours can you devote per day to this project?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"formAddCollabz\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"Collaborators\"), React.createElement(Form.Control, {\n        as: \"select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"select...\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, \"...\"))), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        onSubmit: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return ProjectForm;\n}(React.Component);\n\nexport default ProjectForm;","map":{"version":3,"sources":["/Users/james/Desktop/REACT_APPS/react-prac-two/client/src/components/ProjectForm/ProjectForm.js"],"names":["React","API","ProjectForm","state","projectTitle","creator","startDate","deadLine","workTime","commitment","handleInputChange","e","target","name","value","setState","handleFormSubmit","preventDefault","title","saveProject","then","res","console","log","catch","err","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n//import { Form, Button, Container } from 'react-bootstrap'\nimport API from '../../utils/API'\n\n\n\n\n\n\n\n/*\nclass ProjectForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: {\n                projectTitle: '',\n                creator: '',\n                startDate: '',\n                deadLine: ''\n            }\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({ value: e.target.value });\n    }\n\n    handleSubmit(e) {\n        alert(\"Form has been successfully submitted! :: \"+this.state.value.projectTitle);\n        e.preventDefault();\n    }\n\n\n    render() {\n        return(\n            <React.Fragment>\n\n                    <form method=\"post\" onSubmit={this.handleSubmit} >\n                        <input type=\"text\" value={this.state.value.projectTitle} onChange={this.handleChange} placeholder=\"Project Title\" /> <br/>\n                        <input type=\"text\" value={this.state.value.creator} onChange={this.handleChange} placeholder=\"Username\" /> <br/>\n                        <input type=\"text\" value={this.state.value.startDate} onChange={this.handleChange} placeholder=\"Start Date\" /> <br/>\n                        <input type=\"text\" value={this.state.value.deadLine} onChange={this.handleChange} placeholder=\"Due Date\" /> <br/>\n                        <br/>\n                        <input type=\"submit\" vlaue=\"submit\" />\n                    </form>\n\n\n            </React.Fragment>\n        )\n    }\n\n\n}\nexport default ProjectForm\n\n\n\n\nclass ProjectForm extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            fields: {},\n            errors: {}\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n\n    };\n\n    handleChange = (e) => {\n        let fields = this.state.fields;\n        fields[e.target.name] = e.target.value;\n        this.setState({\n            fields\n        });\n    }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        if (this.projectForm()) {\n            let fields = {};\n            fields[\"projectTitle\"] = \"\";\n            fields[\"creator\"] = \"\";\n            fields[\"startDate\"] = \"\";\n            fields[\"deadLine\"] = \"\";\n            this.setState({ fields: fields });\n            alert(\"PROJECT SUBMITTED!\")\n        };\n    }\n\n    projectForm = () => {\n        let fields = this.state.fields;\n        let errors = {};\n        let isFormValid = true;\n\n        if (!fields['creator']) {\n            isFormValid = false;\n            errors[\"creator\"] = \"* Please Enter username!\";\n        }\n        if (typeof fields[\"creator\"] !== \"undefined\") {\n            if (!fields[\"creator\"].match(/^[a-zA-z ]*$/)) {\n                isFormValid = false;\n                errors[\"creator\"] = \"*  please add aplhabetical characters!\";\n            }\n        }\n\n\n        if (!fields[\"projectTitle\"]) {\n            isFormValid = false;\n            errors[\"projectTitle\"] = \"* Please define the title of the project!\";\n        }\n        if (typeof fields[\"projectTitle\"] !== \"undefined\") {\n            if (!fields[\"projectTitle\"].match(/^[a-zA-z ]*$/)) {\n                isFormValid = false;\n                errors[\"projectTitle\"] = \"* please user alphabetical characters only!\";\n            }\n        }\n\n        this.setState({\n            errors: errors\n        });\n        return isFormValid;\n\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <div id=\"register\">\n\n                <h3>Enter Details Below</h3>\n                <form method=\"post\" name=\"userProjectForm\" onSubmit={this.submitForm}>\n                    <label>Username:</label>\n                    <input type=\"text\" name=\"creator\" value={this.state.fields.creator} onChange={this.handleChange} />\n                        <div className=\"errorMsg\">{this.state.errors.creator}</div>\n\n                    <label>Project Title</label>\n                    <input type=\"text\" name=\"projectTitle\" value={this.state.fields.projectTitle} />\n                        <div className=\"errorMsg\">{this.state.errors.projectTitle}</div>\n\n                    <label>Start Date</label>\n                    <input type=\"text\" name=\"startDate\" value={this.state.fields.startDate} onChange={this.handleChange} />\n                    <br/>\n                    <label>Dead Line</label>\n                    <input type=\"text\" name=\"deadLine\" value={this.state.fields.deadLine} onChange={this.handleChange} />     \n                    <br/>\n                    <input  style={{ marginLeft: '15.8%' }} type=\"submit\" className=\"button\" value=\"Register\"/>\n\n\n                </form>\n\n\n                </div>\n\n\n\n            </React.Fragment>\n        )\n    }\n\n\n\n}\nexport default ProjectForm\n*/\n\n\n// /\\ ATT::2 /\\\n\n\n// \\/ ATT::1 \\/\n\n\nclass ProjectForm extends React.Component {\n\n    // STATE\n        state = {\n            projectTitle:'',\n            creator: '',\n            startDate: '',\n            deadLine: '',\n            workTime: '',\n            commitment: ''\n        }\n    // handleInputChange\n    handleInputChange = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n    };\n    \n    // handleFormSubmit\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.creator && this.state.title && this.state.startDate && this.state.deadLine) {\n            API.saveProject({\n                title: this.state.projectTitle,\n                creator: this.state.creator,\n                startDate: this.state.startDate,\n                deadLine: this.state.deadLine\n            })\n            .then(res => console.log(res))\n            .catch(err => console.log(err));\n        };\n    };\n    \n    \n    \n    render() {\n        return (\n            <React.Fragment>\n            <Container>\n            \n            <Form>\n            <Form.Group controlId=\"formUserName\">\n            <Form.Label>Project Administrator</Form.Label>\n                <Form.Control \n                type=\"text\" \n                placeholder=\"Enter username\" \n                />\n                </Form.Group>\n                \n                <Form.Group controlId=\"formProjectTitle\">\n                <Form.Label>Project Name</Form.Label>\n                <Form.Control\n                type=\"text\" \n                placeholder=\"What are you working on?\" \n                />\n                </Form.Group>\n                \n                <Form.Group controlId=\"formStartDate\">\n                <Form.Label>Start Date</Form.Label>\n                <Form.Control \n                type=\"text\" \n                placeholder=\"When was this assigned?\"\n                />\n                </Form.Group>\n                \n                <Form.Group controlId=\"formDeadLine\">\n                <Form.Label>Deadline</Form.Label>\n                <Form.Control \n                type=\"text\" \n                placeholder=\"When is this to be completed by?\"\n                />\n                </Form.Group>\n                <Form.Group controlId=\"formWorkData\">\n                <Form.Label>Hours worked per week?</Form.Label>\n                <Form.Control \n                type=\"text\" \n                placeholder=\"work hours\" \n                />\n                <Form.Label>User Commitment</Form.Label>\n                <Form.Control \n                type=\"text\" \n                placeholder=\"How many hours can you devote per day to this project?\" \n                />\n                </Form.Group>\n                \n                \n                <Form.Group controlId=\"formAddCollabz\">\n                <Form.Label>Collaborators</Form.Label>\n                <Form.Control as=\"select\">\n                <option>select...</option>\n                <option>...</option>\n                </Form.Control>\n                </Form.Group>\n                \n                <Button variant=\"primary\" type=\"submit\" onSubmit={this.handleFormSubmit}>\n                Submit\n                </Button>\n                </Form>\n                </Container>\n                \n                </React.Fragment>\n                );\n            };\n            \n            \n        }\n        \n        export default ProjectForm\n        \n        \n        "]},"metadata":{},"sourceType":"module"}